#####################################################################################
#
# Trait Dependent Protracted Speciation Model TraDeRProS with RevBayes
#
# This script runs the stepping stones and marginal likelihood calculations on the 
# hypotheses provided in the object SpHypothesis
# 
# authors: Guilherme Azevedo
# Please see and cite Azevedo et al. 2024
#
#####################################################################################


# Set the directories and base names for outputs and inputs
workDirPath = "../"
dataDirPath = workDirPath + "data/"
outDirPath = workDirPath + "outputsSpDelimitation/"

treePath = dataDirPath + "BPPConstraint.MCC.CAH.nex"
traitPath = dataDirPath + "CicTroglomorphism.nex"

SpHypothesis <- [ "popmapsHyp/popmapH1.tsv", 
                  "popmapsHyp/popmapH2.tsv",
                  "popmapsHyp/popmapH3.tsv",
                  "popmapsHyp/popmapH4.tsv",
                  "popmapsHyp/popmapH5.tsv",
                  "popmapsHyp/popmapH6.tsv",
                  "popmapsHyp/popmapH7.tsv",
                  "popmapsHyp/popmapH8.tsv",
                  "popmapsHyp/popmapH9.tsv",
                  "popmapsHyp/popmapH10.tsv",
                  "popmapsHyp/popmapH11.tsv",
                  "popmapsHyp/popmapH12.tsv",
                  "popmapsHyp/popmapH13.tsv"
                ]

for (i in 2:SpHypothesis.size()){
    hypothesis = i
    SpHypothesisPath = SpHypothesis[i]

    outputPrefix = "traderpros_H" + hypothesis
    popMapPath = dataDirPath + SpHypothesisPath
				
    # Load set up
    source("traderpros_setupSpDelimitation.REV")

    # Load model
    source("traderpros_model_SpDelimitation.REV")
	
	# Monitors
    ## print to screen
     monitors.append( mnScreen(printgen=n_print_screen) )

    ## Monitor all parameters
     monitors.append( mnModel(file=outDirPath+outputPrefix+".model.log", 
                             printgen=n_print_log) )


    # Power posterior and stepping stones marginal likelihood
    out_name = outDirPath + outputPrefix + ".POWP.log"
	
    pow_p = powerPosterior(mymodel, moves, monitors, out_name, cats=power_categories)
	
    pow_p.burnin(generations=power_burnin_gen,tuningInterval=power_burnin_interval)
	
    pow_p.run(generations=power_generations )
	
    ss = steppingStoneSampler(file=out_name, powerColumnName="power", likelihoodColumnName="likelihood")
	
    ss.marginal()
	
    ssmarginal = ss.marginal()
    
    write(ssmarginal, filename=out_name + ".pw.marginals", separator=" ")
	
  
}