library(ggplot2)
library(RevGadgets)
library(coda)
trace_file = ../../CicRun01TESTS/CicRun01.model.log
trace_file = ../../../CicRun01TESTS/CicRun01.model.log
trace_file = "../../CicRun01TESTS/CicRun01.model.log"
trace_object <- readTrace(trace_file, burnin = burn_in)
burn_in = 0.1
trace_object <- readTrace(trace_file, burnin = burn_in)
out_dir = "./FIGSTEST"
variable="is_birth_hidden"
colors = c("black", "grey")
labels_name = c("No", "Yes")
fig_out_name = TESTFIG
fig_out_name = "testfig"
out_format = "both"
burn_in = 0.1
traceModel <- readTrace(trace_file, burnin = burn_in)
# Generate probability data and label states
plotRJ <- plotTrace(trace = traceModel, vars = c(variable))
variable
variable="is_death_hidden"
plotTrace(trace = traceModel, vars = c(variable))
plotRJ[[1]]$data
traceModel[[1]]
traceModel[[1]]$is_birth_hidden
te <- traceModel[[1]]$is_birth_hidden
te
plotTrace(trace = traceModel, vars = c(variable))
variable="is_birth_hidden"
?plotTrace()
plotTrace(trace = traceModel, vars = c(variable))
plotTrace(trace = traceModel, vars = c(variable))[[1]]
variable="is_death_hidden"
plotTrace(trace = traceModel, vars = c(variable))[[1]]$data
variable2="is_birth_hidden"
as.data.frame(plotTrace(trace = traceModel, vars = c(variable2))[[1]]$data)
traceModel[[1]]$is_birth_hidden
traceModel[[1]]$is_birth_hidden.append(0)
traceModel[[1]]$is_birth_hidden
traceModel[[1]]$is_death_hidden
table(traceModel[[1]]$is_birth_hidden)
table(traceModel[[1]]$is_death_hidden)
# Generate probability data and label states
# Extract the vector
paste0("traceModel[[1]]$",variable)
# Generate probability data and label states
# Extract the vector
v <- paste0("traceModel[[1]]$",variable)
v
v[1]
v[[1]]
traceModel[[1]][[variable]]
traceModel[[1]]$[[variable]]
traceModel[[1]][[variable]]
traceModel[[1]][[variable2]]
factor(traceModel[[1]][[variable2]], levels = c(0, 1))
table(factor(traceModel[[1]][[variable2]], levels = c(0, 1)))
# Count occurrences of 0 and 1, ensuring both are present
counts <- table(factor(traceModel[[1]][[variable2]], levels = c(0, 1)))
# Compute percentages
percentages <- round(100 * counts / sum(counts), 1)
# Create labels
labels <- paste(labels_name, percentages, "%", sep = " ")
labels
# Create labels
labels <- paste(labels_name, ": ", percentages, "%", sep = "")
labels
# Remove labels and counts for missing categories
labels <- labels[counts > 0]
labels
counts <- counts[counts > 0]
colors = c("black", "grey")
labels_name = c("No", "Yes")
# Plot pie chart
pie(counts, labels = labels, main = variable, col = colors[counts > 0])
# Count occurrences of 0 and 1, ensuring both are present
counts <- table(factor(traceModel[[1]][[variable]], levels = c(0, 1)))
# Compute percentages
percentages <- round(100 * counts / sum(counts), 1)
# Create labels
labels <- paste(labels_name, ": ", percentages, "%", sep = "")
# Remove labels and counts for missing categories
labels <- labels[counts > 0]
# Plot pie chart
pie(counts, labels = labels, main = variable, col = colors[counts > 0])
counts
# Generate probability data and label states
########
# Count occurrences of 0 and 1, ensuring both are present
counts <- table(factor(traceModel[[1]][[variable]], levels = c(0, 1)))
# Generate probability data and label states
########
# Count occurrences of 0 and 1, ensuring both are present
counts <- table(factor(traceModel[[1]][[variable2]], levels = c(0, 1)))
# Compute percentages
percentages <- round(100 * counts / sum(counts), 1)
# Prepare data for ggplot
data <- data.frame(
State = labels_name, # Map 0 -> "No", 1 -> "Yes"
Count = as.numeric(counts),
Percentage = percentages
)
data
# Filter out missing categories
data <- data[data$Count > 0, ]
# Create the ggplot pie chart
ggplot(data, aes(x = "", y = Count, fill = State)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
scale_fill_manual(values = colors) +
theme_void() +
labs(title = variable, fill = "State") + # Add title and legend title
geom_text(aes(label = paste0(State, ": ", Percentage, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme(legend.position = "none") # Optionally remove legend
data
# Create the ggplot pie chart
ggplot(data, aes(x = "", y = Count, fill = State)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
scale_fill_manual(values = colors) +
theme_void() +
labs(title = variable, fill = "State") + # Add title and legend title
geom_text(aes(label = paste0(State, ": ", Percentage.Var1, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme(legend.position = "none") # Optionally remove legend
# Create the ggplot pie chart
ggplot(data, aes(x = "", y = Count, fill = State)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
scale_fill_manual(values = colors) +
theme_void() +
labs(title = variable, fill = "State") + # Add title and legend title
geom_text(aes(label = paste0(State, ": ", Percentage.Freq, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme(legend.position = "none") # Optionally remove legend
# Generate probability data and label states
########
# Count occurrences of 0 and 1, ensuring both are present
counts <- table(factor(traceModel[[1]][[variable]], levels = c(0, 1)))
# Compute percentages
percentages <- round(100 * counts / sum(counts), 1)
# Prepare data for ggplot
data <- data.frame(
State = labels_name, # Map 0 -> "No", 1 -> "Yes"
Count = as.numeric(counts),
Percentage = percentages
)
# Filter out missing categories
data <- data[data$Count > 0, ]
# Create the ggplot pie chart
ggplot(data, aes(x = "", y = Count, fill = State)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
scale_fill_manual(values = colors) +
theme_void() +
labs(title = variable, fill = "State") + # Add title and legend title
geom_text(aes(label = paste0(State, ": ", Percentage.Freq, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme(legend.position = "none") # Optionally remove legend
